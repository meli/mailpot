name: Build release binary

env:
  RUST_BACKTRACE: 1
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  SQLITE_BIN: ~/.sqlite3/sqlite3

on:
  workflow_dispatch:
  push:
    tags:
      - v*

jobs:
  build:
    name: Build on ${{ matrix.build }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build: [linux-amd64, ]
        include:
          - build: linux-amd64
            os: ubuntu-latest
            rust: stable
            artifact_name: 'mailpot-linux-amd64'
            target: x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v2
      - id: cache-sqlite3-bin
        name: Cache sqlite3 binary
        uses: actions/cache@v3
        with:
          path: ~/.sqlite3
          key: toolchain-sqlite3
      - if: ${{ steps.cache-sqlite3-bin.outputs.cache-hit != 'true' }}
        name: Download sqlite3 binary
        run: |
          set -ex
          sudo apt-get install -y --quiet wget unzip
          mkdir -p ~/.sqlite3
          cd ~/.sqlite3
          wget "https://sqlite.org/2023/sqlite-tools-linux-x86-3420000.zip"
          unzip sqlite-tools-linux-x86-3420000.zip
          mv sqlite-tools-linux-x86-3420000/* .
          rm -rf sqlite-tools-linux-x86-3420000*
          echo "SQLITE_BIN=$(pwd)/sqlite3" >> $GITHUB_ENV
      - id: cache-rustup
        name: Cache Rust toolchain
        uses: actions/cache@v3
        with:
          path: ~/.rustup
          key: toolchain-${{ matrix.os }}-${{ matrix.rust }}
      - if: ${{ steps.cache-rustup.outputs.cache-hit != 'true' }}
        name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true
      - name: Configure cargo data directory
        # After this point, all cargo registry and crate data is stored in
        # $GITHUB_WORKSPACE/.cargo_home. This allows us to cache only the files
        # that are needed during the build process. Additionally, this works
        # around a bug in the 'cache' action that causes directories outside of
        # the workspace dir to be saved/restored incorrectly.
        run: echo "CARGO_HOME=$(pwd)/.cargo_home" >> $GITHUB_ENV
      - id: cache-cargo
        name: Cache cargo configuration and installations
        uses: actions/cache@v3
        with:
          path: ${{ env.CARGO_HOME }}
          key: cargo-${{ matrix.os }}-${{ matrix.rust }}
      - if: ${{ steps.cache-cargo.outputs.cache-hit != 'true' }} && matrix.target
        name: Setup Rust target
        run: |
          mkdir -p "${{ env.CARGO_HOME }}"
          cat << EOF > "${{ env.CARGO_HOME }}"/config.toml
          [build]
          target = "${{ matrix.target }}"
          EOF
      - name: Build binary
        run: |
          cargo build --release --bin mpot --bin mpot-gen --bin mpot-web -p mailpot-cli -p mailpot-archives -p mailpot-web
          mkdir artifacts
          mv target/*/release/* target/ || true
          mv target/release/* target/ || true
          mv target/mpot target/mpot-web target/mpot-gen artifacts/
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.artifact_name }}
          path: artifacts
          if-no-files-found: error
          retention-days: 7

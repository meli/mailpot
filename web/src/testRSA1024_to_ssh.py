#!/usr/bin/env python3

# pip install pycryptodome
from Crypto.PublicKey import RSA

# rfc9500
# RSA-1024 key "testRSA1024"

# fmt: off

n = int.from_bytes(
    [ 0xB0, 0xD1, 0x83, 0x52, 0xA8, 0x8F, 0x53, 0xD5, 0x51, 0x6F, 0x46, 0xC2, 0x0E, 0x7A, 0x36, 0x7D, 0x7D, 0xE8, 0x8A, 0xCF, 0x54, 0xA0, 0x19, 0xF6, 0xDE, 0xF5, 0x7A, 0xB9, 0xB4, 0x4C, 0xED, 0xDB, 0x22, 0x42, 0xB1, 0xBC, 0xA0, 0xFB, 0x1B, 0x5C, 0xB8, 0x2B, 0x30, 0x36, 0x17, 0x6A, 0x63, 0x90, 0x35, 0x64, 0xDE, 0xC6, 0xEB, 0x41, 0xDB, 0x2F, 0x8F, 0xC7, 0x87, 0xF4, 0xE5, 0x2E, 0x11, 0x49, 0xE3, 0x33, 0x47, 0x57, 0x29, 0x73, 0xF6, 0x60, 0xC3, 0xC7, 0x7C, 0xA9, 0xE0, 0x82, 0x1C, 0x2B, 0x69, 0x5B, 0xE7, 0xAE, 0x9D, 0x7D, 0x30, 0xF4, 0x07, 0x91, 0x10, 0xF4, 0x8A, 0xAE, 0x6F, 0x8B, 0x70, 0x2D, 0x47, 0x4B, 0x29, 0x00, 0x81, 0x7F, 0x28, 0x66, 0x24, 0x9B, 0xEC, 0x12, 0xA2, 0xB1, 0x9B, 0x82, 0x78, 0x41, 0x68, 0x08, 0xF8, 0x1A, 0xE1, 0xFC, 0xF9, 0xB7, 0x77, 0x8A, 0x62, 0x3F, ],
    byteorder="big",
)
e = int.from_bytes(
    [ 0x01, 0x00, 0x01, ],
    byteorder="big",
)
d = int.from_bytes(
    [ 0x48, 0x2E, 0x9F, 0x8F, 0xA4, 0xE4, 0x2D, 0xF3, 0x0D, 0x75, 0x81, 0xCB, 0x42, 0xA1, 0xBD, 0x90, 0xE9, 0x4F, 0x7F, 0x2B, 0x38, 0x7E, 0xCB, 0x5A, 0xAE, 0x96, 0x43, 0xED, 0x7F, 0x9F, 0x50, 0x12, 0x7F, 0x1F, 0xFE, 0xF2, 0xE4, 0x3C, 0xDE, 0x64, 0xB1, 0x82, 0x60, 0x02, 0x14, 0xF9, 0x07, 0x80, 0x1D, 0x6B, 0xFA, 0x4D, 0xF6, 0x48, 0x42, 0x34, 0x5E, 0x5B, 0xB4, 0x32, 0xD3, 0x44, 0x45, 0x25, 0xD8, 0x30, 0x16, 0x54, 0xC5, 0x44, 0x2B, 0x0A, 0x5E, 0x11, 0xB9, 0xC7, 0xE2, 0x01, 0xFA, 0x32, 0xF4, 0x1A, 0xBA, 0xF4, 0xF0, 0xA6, 0xE0, 0x3C, 0xF0, 0xE0, 0xCB, 0x82, 0x66, 0xC6, 0x2A, 0xD1, 0x1D, 0x95, 0x6D, 0x53, 0xC9, 0x46, 0x6E, 0x48, 0x99, 0x5F, 0xEA, 0x26, 0x0C, 0x85, 0x36, 0xF0, 0x41, 0xCB, 0x35, 0x62, 0xFA, 0xAC, 0x51, 0x1C, 0x4D, 0x66, 0xA8, 0xFE, 0xD1, 0x11, 0xB2, 0x91, ],
    byteorder="big",
)
p = int.from_bytes(
    [ 0xE9, 0xD8, 0x6E, 0x4D, 0xC3, 0x4A, 0x98, 0x5A, 0x7E, 0xC7, 0x5A, 0x6F, 0x54, 0xA7, 0x5C, 0xE4, 0x51, 0x39, 0xE4, 0x52, 0x40, 0xB3, 0x86, 0xAB, 0x71, 0x1D, 0xB7, 0x91, 0xBC, 0xD9, 0x87, 0x18, 0xA1, 0x3B, 0xAF, 0x21, 0x8C, 0x24, 0x49, 0x36, 0x46, 0x68, 0x07, 0x56, 0xCB, 0x50, 0xA6, 0xCB, 0xEE, 0x15, 0x8E, 0x25, 0x21, 0x44, 0x99, 0x12, 0x30, 0x1C, 0x0D, 0x41, 0x49, 0x11, 0x18, 0x45, ],
    byteorder="big",
)
q = int.from_bytes(
    [ 0xC1, 0x91, 0xFA, 0x3B, 0x55, 0x0B, 0x39, 0x1A, 0x7C, 0xB0, 0x72, 0x83, 0x76, 0x27, 0x72, 0x95, 0xE6, 0x1C, 0x65, 0x4F, 0x0B, 0xEF, 0x2F, 0x58, 0xDC, 0xE5, 0xC9, 0x62, 0xA1, 0x0B, 0x7D, 0xD7, 0x5F, 0x06, 0x01, 0x54, 0x65, 0xE5, 0x50, 0x76, 0xE4, 0x66, 0x26, 0x3E, 0xEB, 0xCA, 0xED, 0x20, 0xD2, 0xEB, 0xAB, 0x39, 0x31, 0x3E, 0x8B, 0xC5, 0x67, 0x32, 0x0F, 0xE8, 0xB2, 0xDC, 0x62, 0xB3, ],
    byteorder="big",
)

# fmt: on

# Sanity checks
assert len((n.to_bytes(length=1024).lstrip(bytes([0x00])))) * 8 == 1024
assert len((d.to_bytes(length=1024).lstrip(bytes([0x00])))) * 8 == 1024
assert len((p.to_bytes(length=1024).lstrip(bytes([0x00])))) * 8 == 512
assert len((q.to_bytes(length=1024).lstrip(bytes([0x00])))) * 8 == 512

key = RSA.construct((n, e, d, p, q), consistency_check=True)

# RSA-1024 key in encoded form:

encoded = b"""-----BEGIN RSA PRIVATE KEY-----
MIICXQIBAAKBgQCw0YNSqI9T1VFvRsIOejZ9feiKz1SgGfbe9Xq5tEzt2yJCsbyg
+xtcuCswNhdqY5A1ZN7G60HbL4/Hh/TlLhFJ4zNHVylz9mDDx3yp4IIcK2lb566d
fTD0B5EQ9Iqub4twLUdLKQCBfyhmJJvsEqKxm4J4QWgI+Brh/Pm3d4piPwIDAQAB
AoGASC6fj6TkLfMNdYHLQqG9kOlPfys4fstarpZD7X+fUBJ/H/7y5DzeZLGCYAIU
+QeAHWv6TfZIQjReW7Qy00RFJdgwFlTFRCsKXhG5x+IB+jL0Grr08KbgPPDgy4Jm
xirRHZVtU8lGbkiZX+omDIU28EHLNWL6rFEcTWao/tERspECQQDp2G5Nw0qYWn7H
Wm9Up1zkUTnkUkCzhqtxHbeRvNmHGKE7ryGMJEk2RmgHVstQpsvuFY4lIUSZEjAc
DUFJERhFAkEAwZH6O1ULORp8sHKDdidyleYcZU8L7y9Y3OXJYqELfddfBgFUZeVQ
duRmJj7ryu0g0uurOTE+i8VnMg/ostxiswJBAOc64Dd8uLJWKa6uug+XPr91oi0n
OFtM+xHrNK2jc+WmcSg3UJDnAI3uqMc5B+pERLq0Dc6hStehqHjUko3RnZECQEGZ
eRYWciE+Cre5dzfZkomeXE0xBrhecV0bOq6EKWLSVE+yr6mAl05ThRK9DCfPSOpy
F6rgN3QiyCA9J/1FluUCQQC5nX+PTU1FXx+6Ri2ZCi6EjEKMHr7gHcABhMinZYOt
N59pra9UdVQw9jxCU9G7eMyb0jJkNACAuEwakX3gi27b
-----END RSA PRIVATE KEY-----"""

assert key.export_key(format="PEM") == encoded

print(key.publickey().export_key(format="OpenSSH"))
